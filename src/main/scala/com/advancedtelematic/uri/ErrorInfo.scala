/*
 * Copyright 2009-2017 Lightbend Inc. <http://www.lightbend.com>
 * Copyright 2017 ATS Advanced Telematic Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.advancedtelematic.uri

/**
  * Two-level model of error information.
  * The summary should explain what is wrong with the request or response *without* directly
  * repeating anything present in the message itself (in order to not open holes for XSS attacks),
  * while the detail can contain additional information from any source (even the request itself).
  */
final case class ErrorInfo(summary: String = "", detail: String = "") {
  def withSummary(newSummary: String) = copy(summary = newSummary)
  def withSummaryPrepended(prefix: String) =
    withSummary(if (summary.isEmpty) prefix else prefix + ": " + summary)
  def withFallbackSummary(fallbackSummary: String) =
    if (summary.isEmpty) withSummary(fallbackSummary) else this
  def formatPretty =
    if (summary.isEmpty) detail else if (detail.isEmpty) summary else summary + ": " + detail
  def format(withDetail: Boolean): String = if (withDetail) formatPretty else summary
}

object ErrorInfo {

  /**
    * Allows constructing an `ErrorInfo` from a single string.
    * Used for example when catching exceptions generated by the header value parser, which doesn't provide
    * summary/details information but structures its exception messages accordingly.
    */
  def fromCompoundString(message: String): ErrorInfo = message.split(": ", 2) match {
    case Array(summary, detail) ⇒ apply(summary, detail)
    case _                      ⇒ ErrorInfo("", message)
  }
}

/** Marker for exceptions that provide an ErrorInfo */
abstract class ExceptionWithErrorInfo(info: ErrorInfo) extends RuntimeException(info.formatPretty)

case class IllegalUriException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

object IllegalUriException {
  def apply(summary: String, detail: String = ""): IllegalUriException =
    apply(ErrorInfo(summary, detail))
}
